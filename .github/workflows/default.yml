---
name: CI/CD
on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    branches:
      - master

jobs:
  main:
    name: lint/test
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    services:
      postgres:
        image: postgres:alpine
        env:
          POSTGRES_USER: statstag
          POSTGRES_PASSWORD: statstag
          POSTGRES_DB: statstag
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s
          --health-retries 5
        ports:
          - '5432:5432'
    env:
      DATABASE_URL: postgres://statstag:statstag@localhost:5432/statstag
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
          cache: npm
      - run: npm ci
      - run: npx playwright install --with-deps
      - run: npx playwright install chrome
      - run: npx playwright install msedge
      - run: npm run check
        if: matrix.os == 'ubuntu-latest'
      - run: npm run lint
        if: matrix.os == 'ubuntu-latest'
      - run: npm run test:unit
        if: matrix.os == 'ubuntu-latest'
      - run: npm run test
      - run: npm run build
        if: matrix.os == 'ubuntu-latest'

  docker:
    runs-on: ubuntu-latest
    needs: [main]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
      - uses: docker/metadata-action@v4
        id: docker
        with:
          images: |
            mfinelli/statstag
            ghcr.io/mfinelli/statstag
          tags: type=semver,pattern={{version}}
      - uses: docker/login-action@v2
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/login-action@v2
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}
      - uses: docker/build-push-action@v4
        with:
          platforms: linux/amd64,linux/arm64
          push: ${{ startsWith(github.ref, 'refs/tags/') }}
          tags: ${{ steps.docker.outputs.tags }}
      - uses: peter-evans/dockerhub-description@v3
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: mfinelli/statstag
          short-description: ${{ github.event.repository.description }}

  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [main, docker]
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: [release]
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@v1

      # TODO: I'm not crazy about hardcoding the machine name "app" here, we
      #       can probably come up with something a little more clever
      - run: >
          echo "id=$(flyctl machines list --json | jq -r '.[] |
          select(.name=="app") | .id')" >> $GITHUB_OUTPUT
        id: fly-machine
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - run: >
          flyctl machines update "${{ steps.fly-machine.outputs.id }}" --yes
          --image "mfinelli/statstag:$(sed -e "s|^refs/tags/v||" <<< "${{
          github.ref }}")"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
